# Python bytecode 2.7 (decompiled from Python 2.7)
# Embedded file name: scripts/common/site-packages/Pympler-0.9/pympler/tracker.py
import gc
import inspect
from pympler import muppy, summary
from pympler.util import compat

class SummaryTracker(object):

    def __init__(self, ignore_self=True):
        self.s0 = summary.summarize(muppy.get_objects())
        self.summaries = {}
        self.ignore_self = ignore_self

    def create_summary(self):
        if not self.ignore_self:
            res = summary.summarize(muppy.get_objects())
        else:
            all_of_them = []
            ref_counter = {}

            def store_info(o):
                all_of_them.append(o)
                if id(o) in ref_counter:
                    ref_counter[id(o)] += 1
                else:
                    ref_counter[id(o)] = 1

            store_info(self.summaries)
            for k, v in self.summaries.items():
                store_info(k)
                summary._traverse(v, store_info)

        res = summary.summarize(muppy.get_objects())
        for _id in ref_counter:
            if len(gc.get_referrers(_id)) == 3:
                summary._subtract(res, _id)

        for o in all_of_them:
            if len(gc.get_referrers(o)) == ref_counter[id(o)] + 2:
                summary._subtract(res, o)

        return res

    def diff(self, summary1=None, summary2=None):
        res = None
        if summary2 is None:
            self.s1 = self.create_summary()
            if summary1 is None:
                res = summary.get_diff(self.s0, self.s1)
            else:
                res = summary.get_diff(summary1, self.s1)
            self.s0 = self.s1
        elif summary1 is not None:
            res = summary.get_diff(summary1, summary2)
        else:
            raise ValueError('You cannot provide summary2 without summary1.')
        return summary._sweep(res)

    def print_diff(self, summary1=None, summary2=None):
        summary.print_(self.diff(summary1=summary1, summary2=summary2))

    def format_diff(self, summary1=None, summary2=None):
        return summary.format_(self.diff(summary1=summary1, summary2=summary2))

    def store_summary(self, key):
        self.summaries[key] = self.create_summary()


class ObjectTracker(object):

    def __init__(self):
        self.o0 = self._get_objects(ignore=(inspect.currentframe(),))

    def _get_objects(self, ignore=()):

        def remove_ignore(objects, ignore=()):
            res = []
            for o in objects:
                if not compat.object_in_list(o, ignore):
                    res.append(o)

            return res

        tmp = gc.get_objects()
        ignore += (inspect.currentframe(),
         self,
         ignore,
         remove_ignore)
        if hasattr(self, 'o0'):
            ignore += (self.o0,)
        if hasattr(self, 'o1'):
            ignore += (self.o1,)
        tmp = remove_ignore(tmp, ignore)
        res = []
        for o in tmp:
            refs = muppy.get_referents(o)
            for ref in refs:
                if not gc.is_tracked(ref):
                    res.append(ref)

        res.extend(tmp)
        res = muppy._remove_duplicates(res)
        if ignore is not None:
            res = remove_ignore(res, ignore)
        del ignore
        return res

    def get_diff(self, ignore=()):
        self.o1 = self._get_objects(ignore + (inspect.currentframe(),))
        diff = muppy.get_diff(self.o0, self.o1)
        self.o0 = self.o1
        return diff

    def print_diff(self, ignore=()):
        for line in self.format_diff(ignore + (inspect.currentframe(),)):
            print line

    def format_diff(self, ignore=()):
        lines = []
        diff = self.get_diff(ignore + (inspect.currentframe(),))
        lines.append('Added objects:')
        for line in summary.format_(summary.summarize(diff['+'])):
            lines.append(line)

        lines.append('Removed objects:')
        for line in summary.format_(summary.summarize(diff['-'])):
            lines.append(line)

        return lines

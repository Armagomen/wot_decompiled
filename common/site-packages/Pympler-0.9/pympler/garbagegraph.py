# Python bytecode 2.7 (decompiled from Python 2.7)
# Embedded file name: scripts/common/site-packages/Pympler-0.9/pympler/garbagegraph.py
from pympler.refgraph import ReferenceGraph
from pympler.util.stringutils import trunc, pp
import sys
import gc
__all__ = ['GarbageGraph', 'start_debug_garbage', 'end_debug_garbage']

class GarbageGraph(ReferenceGraph):

    def __init__(self, reduce=False, collectable=True):
        if collectable:
            gc.set_debug(gc.DEBUG_SAVEALL)
        else:
            gc.set_debug(0)
        gc.collect()
        ReferenceGraph.__init__(self, gc.garbage, reduce)

    def print_stats(self, stream=None):
        if not stream:
            stream = sys.stdout
        self.metadata.sort(key=lambda x: -x.size)
        stream.write('%-10s %8s %-12s %-46s\n' % ('id', 'size', 'type', 'representation'))
        for g in self.metadata:
            stream.write('0x%08x %8d %-12s %-46s\n' % (g.id,
             g.size,
             trunc(g.type, 12),
             trunc(g.str, 46)))

        stream.write('Garbage: %8d collected objects (%s in cycles): %12s\n' % (self.count, self.num_in_cycles, pp(self.total_size)))


def start_debug_garbage():
    gc.collect()
    gc.disable()


def end_debug_garbage():
    gc.set_debug(0)
    gc.enable()

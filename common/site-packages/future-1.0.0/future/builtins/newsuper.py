# Python bytecode 2.7 (decompiled from Python 2.7)
# Embedded file name: scripts/common/site-packages/future-1.0.0/future/builtins/newsuper.py
from __future__ import absolute_import
import sys
from types import FunctionType
from future.utils import PY3, PY26
_builtin_super = super
_SENTINEL = object()

def newsuper(typ=_SENTINEL, type_or_obj=_SENTINEL, framedepth=1):
    if typ is _SENTINEL:
        f = sys._getframe(framedepth)
        try:
            type_or_obj = f.f_locals[f.f_code.co_varnames[0]]
        except (IndexError, KeyError):
            raise RuntimeError('super() used in a function with no args')

        try:
            typ = find_owner(type_or_obj, f.f_code)
        except (AttributeError, RuntimeError, TypeError):
            try:
                typ = find_owner(type_or_obj.__class__, f.f_code)
            except AttributeError:
                raise RuntimeError('super() used with an old-style class')
            except TypeError:
                raise RuntimeError('super() called outside a method')

    return _builtin_super(typ, type_or_obj) if type_or_obj is not _SENTINEL else _builtin_super(typ)


def find_owner(cls, code):
    for typ in cls.__mro__:
        for meth in typ.__dict__.values():
            try:
                while not isinstance(meth, FunctionType):
                    if isinstance(meth, property):
                        meth = meth.fget
                    try:
                        meth = meth.__func__
                    except AttributeError:
                        meth = meth.__get__(cls, typ)

            except (AttributeError, TypeError):
                continue

            if meth.func_code is code:
                return typ

    raise TypeError


def superm(*args, **kwds):
    f = sys._getframe(1)
    nm = f.f_code.co_name
    return getattr(newsuper(framedepth=2), nm)(*args, **kwds)


__all__ = ['newsuper']
